/* Receive Incoming USB Host MIDI using functions.  As usbMIDI
   reads incoming messages, handler functions are run.
   See the InputRead example for the non-function alterative.

   This very long example demonstrates all possible handler
   functions.  Most applications need only some of these.
   This example is meant to allow easy copy-and-paste of the
   desired functions.

   Use the Arduino Serial Monitor to view the messages
   as Teensy receives them by USB MIDI

   You must select MIDI from the "Tools > USB Type" menu

   This example code is in the public domain.
*/

#include <USBHost_t36.h>
#include <ASIXEthernet.h>
#include "if_ether.h"
#include "Structs.h"

USBHost myusb;
USBHub hub1(myusb);
USBHub hub2(myusb);
ASIXEthernet asix1(myusb);

uint8_t sbuf[2500]; // send buffer
uint16_t sbuflen; // length of data to send
uint8_t mainMac[6] = {0x00, 0xA0, 0x7E, 0xA0, 0x15, 0xB8};
uint8_t hostAddress[6] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
uint8_t mainVersion[10] = {'v','1','.','3','7',0,0,0,0,0x00};
uint8_t mainName[8] = {'V','e','c','t','o','r','1',' '};
uint8_t mainProduct = 0x03;
uint8_t status1 = 0xE0;
uint16_t packetProduct = 0;
uint16_t advertisePacketCount = 0;

void setup() {
  Serial.begin(115200);

  // Wait 1.5 seconds before turning on USB Host.  If connected USB devices
  // use too much power, Teensy at least completes USB enumeration, which
  // makes isolating the power issue easier.
  delay(1500);
  Serial.println("USB Host InputFunctions example");
  delay(10);
  myusb.begin();
  asix1.setHandleRecieve(handleRecieve);
//  Serial.println("Loop");
  
}

elapsedMillis readTimer;
elapsedMillis advertise;

uint8_t packet_bytes[] = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x28, 0xc6,
  0x8e, 0x7c, 0x54, 0x16, 0x08, 0x00, 0x45, 0x00,
  0x00, 0xc9, 0x00, 0x00, 0x40, 0x00, 0x40, 0x11,
  0x79, 0x4a, 0xc0, 0xa8, 0x00, 0x32, 0xff, 0xff,
  0xff, 0xff, 0x80, 0x02, 0x1c, 0xff, 0x00, 0xb5,
  0xdb, 0x39, 0x4b, 0x41, 0x4e, 0x4e, 0x4f, 0x55,
  0x25, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28,
  0xc6, 0x8e, 0x7c, 0x54, 0x16, 0x52, 0x36, 0x32,
  0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x36, 0x33,
  0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x31, 0x2e, 0x30, 0x32, 0x2e, 0x30, 0x31,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02,
  0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void loop() {
  // The handler functions are called when midi1 reads data.  They
  // will not be called automatically.  You must call midi1.read()
  // regularly from loop() for midi1 to actually read incoming
  // data and run the handler functions as messages arrive.
//  Serial.println(readTimer);
  myusb.Task();
//  Serial.println("Help1");
  if(readTimer >= 1000) {
//    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
    readTimer -= 1000;
//    Serial.println("Write: ");
//    Serial.println(asix1.read());
//    asix1.write_packet(packet_bytes, sizeof(packet_bytes));
  }
  sendAdvertise();
  asix1.read();
//  asix1.write_packed(0xFFFF);
}
